// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CheckEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(
    SELECT 1 FROM users 
    WHERE email = $1 AND deleted_at IS NULL
) AS exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, CheckEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const CheckUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(
    SELECT 1 FROM users 
    WHERE username = $1 AND deleted_at IS NULL
) AS exists
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, CheckUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const CreateUser = `-- name: CreateUser :one

INSERT INTO users (
    email,
    email_verified,
    password_hash,
    username,
    first_name,
    last_name,
    avatar_url,
    timezone
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
          avatar_url, timezone, locale, is_active, 
          verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
          last_login_at, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email         string         `db:"email" json:"email"`
	EmailVerified sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash  sql.NullString `db:"password_hash" json:"password_hash"`
	Username      string         `db:"username" json:"username"`
	FirstName     string         `db:"first_name" json:"first_name"`
	LastName      string         `db:"last_name" json:"last_name"`
	AvatarUrl     sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone      sql.NullString `db:"timezone" json:"timezone"`
}

type CreateUserRow struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	Email                      string         `db:"email" json:"email"`
	EmailVerified              sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash               sql.NullString `db:"password_hash" json:"password_hash"`
	Username                   string         `db:"username" json:"username"`
	FirstName                  string         `db:"first_name" json:"first_name"`
	LastName                   string         `db:"last_name" json:"last_name"`
	FullName                   sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl                  sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone                   sql.NullString `db:"timezone" json:"timezone"`
	Locale                     sql.NullString `db:"locale" json:"locale"`
	IsActive                   sql.NullBool   `db:"is_active" json:"is_active"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
	ResetToken                 sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt        sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
	LastLoginAt                sql.NullTime   `db:"last_login_at" json:"last_login_at"`
	CreatedAt                  sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt                  sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt                  sql.NullTime   `db:"deleted_at" json:"deleted_at"`
}

// backend/sql/users.sql
// User CRUD operations
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.Email,
		arg.EmailVerified,
		arg.PasswordHash,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.AvatarUrl,
		arg.Timezone,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
       avatar_url, timezone, locale, is_active,
       verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
       last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE email = $1 AND deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	Email                      string         `db:"email" json:"email"`
	EmailVerified              sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash               sql.NullString `db:"password_hash" json:"password_hash"`
	Username                   string         `db:"username" json:"username"`
	FirstName                  string         `db:"first_name" json:"first_name"`
	LastName                   string         `db:"last_name" json:"last_name"`
	FullName                   sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl                  sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone                   sql.NullString `db:"timezone" json:"timezone"`
	Locale                     sql.NullString `db:"locale" json:"locale"`
	IsActive                   sql.NullBool   `db:"is_active" json:"is_active"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
	ResetToken                 sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt        sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
	LastLoginAt                sql.NullTime   `db:"last_login_at" json:"last_login_at"`
	CreatedAt                  sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt                  sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt                  sql.NullTime   `db:"deleted_at" json:"deleted_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
       avatar_url, timezone, locale, is_active,
       verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
       last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	Email                      string         `db:"email" json:"email"`
	EmailVerified              sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash               sql.NullString `db:"password_hash" json:"password_hash"`
	Username                   string         `db:"username" json:"username"`
	FirstName                  string         `db:"first_name" json:"first_name"`
	LastName                   string         `db:"last_name" json:"last_name"`
	FullName                   sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl                  sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone                   sql.NullString `db:"timezone" json:"timezone"`
	Locale                     sql.NullString `db:"locale" json:"locale"`
	IsActive                   sql.NullBool   `db:"is_active" json:"is_active"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
	ResetToken                 sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt        sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
	LastLoginAt                sql.NullTime   `db:"last_login_at" json:"last_login_at"`
	CreatedAt                  sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt                  sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt                  sql.NullTime   `db:"deleted_at" json:"deleted_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
       avatar_url, timezone, locale, is_active,
       verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
       last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE (email = $1 OR username = $1) AND deleted_at IS NULL
`

type GetUserByIdentifierRow struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	Email                      string         `db:"email" json:"email"`
	EmailVerified              sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash               sql.NullString `db:"password_hash" json:"password_hash"`
	Username                   string         `db:"username" json:"username"`
	FirstName                  string         `db:"first_name" json:"first_name"`
	LastName                   string         `db:"last_name" json:"last_name"`
	FullName                   sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl                  sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone                   sql.NullString `db:"timezone" json:"timezone"`
	Locale                     sql.NullString `db:"locale" json:"locale"`
	IsActive                   sql.NullBool   `db:"is_active" json:"is_active"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
	ResetToken                 sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt        sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
	LastLoginAt                sql.NullTime   `db:"last_login_at" json:"last_login_at"`
	CreatedAt                  sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt                  sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt                  sql.NullTime   `db:"deleted_at" json:"deleted_at"`
}

func (q *Queries) GetUserByIdentifier(ctx context.Context, email string) (GetUserByIdentifierRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByIdentifier, email)
	var i GetUserByIdentifierRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
       avatar_url, timezone, locale, is_active,
       verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
       last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE username = $1 AND deleted_at IS NULL
`

type GetUserByUsernameRow struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	Email                      string         `db:"email" json:"email"`
	EmailVerified              sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash               sql.NullString `db:"password_hash" json:"password_hash"`
	Username                   string         `db:"username" json:"username"`
	FirstName                  string         `db:"first_name" json:"first_name"`
	LastName                   string         `db:"last_name" json:"last_name"`
	FullName                   sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl                  sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone                   sql.NullString `db:"timezone" json:"timezone"`
	Locale                     sql.NullString `db:"locale" json:"locale"`
	IsActive                   sql.NullBool   `db:"is_active" json:"is_active"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
	ResetToken                 sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt        sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
	LastLoginAt                sql.NullTime   `db:"last_login_at" json:"last_login_at"`
	CreatedAt                  sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt                  sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt                  sql.NullTime   `db:"deleted_at" json:"deleted_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const SoftDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, SoftDeleteUser, id)
	return err
}

const UpdateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, UpdateUserLastLogin, id)
	return err
}

const UpdateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID      `db:"id" json:"id"`
	PasswordHash sql.NullString `db:"password_hash" json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, UpdateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const UpdateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET 
    username = COALESCE($1, username),
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    avatar_url = COALESCE($4, avatar_url),
    timezone = COALESCE($5, timezone),
    updated_at = NOW()
WHERE id = $6 AND deleted_at IS NULL
RETURNING id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
          avatar_url, timezone, locale, is_active,
          verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
          last_login_at, created_at, updated_at, deleted_at
`

type UpdateUserProfileParams struct {
	Username  string         `db:"username" json:"username"`
	FirstName string         `db:"first_name" json:"first_name"`
	LastName  string         `db:"last_name" json:"last_name"`
	AvatarUrl sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone  sql.NullString `db:"timezone" json:"timezone"`
	ID        uuid.UUID      `db:"id" json:"id"`
}

type UpdateUserProfileRow struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	Email                      string         `db:"email" json:"email"`
	EmailVerified              sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash               sql.NullString `db:"password_hash" json:"password_hash"`
	Username                   string         `db:"username" json:"username"`
	FirstName                  string         `db:"first_name" json:"first_name"`
	LastName                   string         `db:"last_name" json:"last_name"`
	FullName                   sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl                  sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone                   sql.NullString `db:"timezone" json:"timezone"`
	Locale                     sql.NullString `db:"locale" json:"locale"`
	IsActive                   sql.NullBool   `db:"is_active" json:"is_active"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
	ResetToken                 sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt        sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
	LastLoginAt                sql.NullTime   `db:"last_login_at" json:"last_login_at"`
	CreatedAt                  sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt                  sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt                  sql.NullTime   `db:"deleted_at" json:"deleted_at"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UpdateUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, UpdateUserProfile,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.AvatarUrl,
		arg.Timezone,
		arg.ID,
	)
	var i UpdateUserProfileRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
