// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: teams.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const CountTeamMembers = `-- name: CountTeamMembers :one
SELECT COUNT(*)
FROM team_memberships
WHERE team_id = $1 
  AND deleted_at IS NULL
`

func (q *Queries) CountTeamMembers(ctx context.Context, teamID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountTeamMembers, teamID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTeam = `-- name: CreateTeam :one

INSERT INTO teams (
    name,
    slug,
    avatar_url,
    settings,
    created_by
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, slug, avatar_url, settings, is_active, created_by, created_at, updated_at, deleted_at
`

type CreateTeamParams struct {
	Name      string                `db:"name" json:"name"`
	Slug      string                `db:"slug" json:"slug"`
	AvatarUrl sql.NullString        `db:"avatar_url" json:"avatar_url"`
	Settings  pqtype.NullRawMessage `db:"settings" json:"settings"`
	CreatedBy uuid.NullUUID         `db:"created_by" json:"created_by"`
}

// path: backend/sql/teams.sql
// ðŸ”„ REFACTORED - Removed duplicate team membership queries
func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, CreateTeam,
		arg.Name,
		arg.Slug,
		arg.AvatarUrl,
		arg.Settings,
		arg.CreatedBy,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AvatarUrl,
		&i.Settings,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetTeamByID = `-- name: GetTeamByID :one
SELECT id, name, slug, avatar_url, settings, is_active, created_by, created_at, updated_at, deleted_at FROM teams
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTeamByID(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRowContext(ctx, GetTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AvatarUrl,
		&i.Settings,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetTeamBySlug = `-- name: GetTeamBySlug :one
SELECT id, name, slug, avatar_url, settings, is_active, created_by, created_at, updated_at, deleted_at FROM teams
WHERE slug = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTeamBySlug(ctx context.Context, slug string) (Team, error) {
	row := q.db.QueryRowContext(ctx, GetTeamBySlug, slug)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AvatarUrl,
		&i.Settings,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const ListTeamsByUser = `-- name: ListTeamsByUser :many
SELECT t.id, t.name, t.slug, t.avatar_url, t.settings, t.is_active, t.created_by, t.created_at, t.updated_at, t.deleted_at
FROM teams t
INNER JOIN team_memberships tm ON t.id = tm.team_id
WHERE tm.user_id = $1 
  AND tm.deleted_at IS NULL
  AND t.deleted_at IS NULL
ORDER BY t.created_at DESC
`

func (q *Queries) ListTeamsByUser(ctx context.Context, userID uuid.UUID) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, ListTeamsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.AvatarUrl,
			&i.Settings,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SoftDeleteTeam = `-- name: SoftDeleteTeam :exec
UPDATE teams
SET 
    deleted_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, SoftDeleteTeam, id)
	return err
}

const UpdateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET 
    name = COALESCE($1, name),
    slug = COALESCE($2, slug),
    avatar_url = COALESCE($3, avatar_url),
    settings = COALESCE($4, settings),
    updated_at = NOW()
WHERE id = $5 AND deleted_at IS NULL
RETURNING id, name, slug, avatar_url, settings, is_active, created_by, created_at, updated_at, deleted_at
`

type UpdateTeamParams struct {
	Name      sql.NullString        `db:"name" json:"name"`
	Slug      sql.NullString        `db:"slug" json:"slug"`
	AvatarUrl sql.NullString        `db:"avatar_url" json:"avatar_url"`
	Settings  pqtype.NullRawMessage `db:"settings" json:"settings"`
	ID        uuid.UUID             `db:"id" json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, UpdateTeam,
		arg.Name,
		arg.Slug,
		arg.AvatarUrl,
		arg.Settings,
		arg.ID,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.AvatarUrl,
		&i.Settings,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
