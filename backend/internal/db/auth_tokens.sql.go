// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth_tokens.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ClearExpiredResetTokens = `-- name: ClearExpiredResetTokens :exec
UPDATE users
SET reset_token = NULL,
    reset_token_expires_at = NULL
WHERE reset_token_expires_at < NOW()
`

func (q *Queries) ClearExpiredResetTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, ClearExpiredResetTokens)
	return err
}

const ClearExpiredVerificationTokens = `-- name: ClearExpiredVerificationTokens :exec

UPDATE users
SET verification_token = NULL,
    verification_token_expires_at = NULL
WHERE verification_token_expires_at < NOW()
`

// ============================================================================
// TOKEN CLEANUP
// ============================================================================
func (q *Queries) ClearExpiredVerificationTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, ClearExpiredVerificationTokens)
	return err
}

const ClearResetToken = `-- name: ClearResetToken :exec
UPDATE users
SET reset_token = NULL,
    reset_token_expires_at = NULL,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) ClearResetToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ClearResetToken, id)
	return err
}

const ClearVerificationToken = `-- name: ClearVerificationToken :exec
UPDATE users
SET verification_token = NULL,
    verification_token_expires_at = NULL,
    email_verified = TRUE,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) ClearVerificationToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ClearVerificationToken, id)
	return err
}

const GetUserByResetToken = `-- name: GetUserByResetToken :one
SELECT id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
       avatar_url, timezone, locale, is_active,
       verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
       last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE reset_token = $1 
  AND reset_token_expires_at > NOW()
  AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByResetToken(ctx context.Context, resetToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByResetToken, resetToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, email, email_verified, password_hash, username, first_name, last_name, full_name, 
       avatar_url, timezone, locale, is_active,
       verification_token, verification_token_expires_at, reset_token, reset_token_expires_at,
       last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE verification_token = $1 
  AND verification_token_expires_at > NOW()
  AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, verificationToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByVerificationToken, verificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.VerificationToken,
		&i.VerificationTokenExpiresAt,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const SetResetToken = `-- name: SetResetToken :exec

UPDATE users
SET reset_token = $2,
    reset_token_expires_at = $3,
    updated_at = NOW()
WHERE id = $1
`

type SetResetTokenParams struct {
	ID                  uuid.UUID      `db:"id" json:"id"`
	ResetToken          sql.NullString `db:"reset_token" json:"reset_token"`
	ResetTokenExpiresAt sql.NullTime   `db:"reset_token_expires_at" json:"reset_token_expires_at"`
}

// ============================================================================
// PASSWORD RESET TOKENS
// ============================================================================
func (q *Queries) SetResetToken(ctx context.Context, arg SetResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, SetResetToken, arg.ID, arg.ResetToken, arg.ResetTokenExpiresAt)
	return err
}

const SetVerificationToken = `-- name: SetVerificationToken :exec


UPDATE users
SET verification_token = $2,
    verification_token_expires_at = $3,
    updated_at = NOW()
WHERE id = $1
`

type SetVerificationTokenParams struct {
	ID                         uuid.UUID      `db:"id" json:"id"`
	VerificationToken          sql.NullString `db:"verification_token" json:"verification_token"`
	VerificationTokenExpiresAt sql.NullTime   `db:"verification_token_expires_at" json:"verification_token_expires_at"`
}

// backend/sql/auth/auth_tokens.sql
// ============================================================================
// EMAIL VERIFICATION TOKENS
// ============================================================================
func (q *Queries) SetVerificationToken(ctx context.Context, arg SetVerificationTokenParams) error {
	_, err := q.db.ExecContext(ctx, SetVerificationToken, arg.ID, arg.VerificationToken, arg.VerificationTokenExpiresAt)
	return err
}
