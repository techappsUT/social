# path: docker-compose.yml

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: socialqueue-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: socialqueue
      POSTGRES_PASSWORD: socialqueue_dev_password
      POSTGRES_DB: socialqueue_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U socialqueue"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: socialqueue-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Uncomment when ready to run backend in Docker
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   container_name: socialqueue-backend
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - DATABASE_URL=postgres://socialqueue:socialqueue_dev_password@postgres:5432/socialqueue_dev?sslmode=disable
  #     - REDIS_URL=redis://redis:6379
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./backend:/app
  #   command: make run

  # Uncomment when ready to run frontend in Docker
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: socialqueue-frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://localhost:8080
  #   depends_on:
  #     - backend
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   command: npm run dev

volumes:
  postgres-data:
  redis-data: