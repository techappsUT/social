// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: webhooks.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const CreateWebhookLog = `-- name: CreateWebhookLog :one

INSERT INTO webhooks_log (
    source,
    event_type,
    payload,
    headers,
    idempotency_key
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, source, event_type, payload, headers, processed, processed_at, response_status, response_body, error_message, idempotency_key, created_at
`

type CreateWebhookLogParams struct {
	Source         WebhookSource   `db:"source" json:"source"`
	EventType      string          `db:"event_type" json:"event_type"`
	Payload        json.RawMessage `db:"payload" json:"payload"`
	Headers        []byte          `db:"headers" json:"headers"`
	IdempotencyKey *string         `db:"idempotency_key" json:"idempotency_key"`
}

// path: backend/sql/webhooks.sql
func (q *Queries) CreateWebhookLog(ctx context.Context, arg CreateWebhookLogParams) (WebhooksLog, error) {
	row := q.db.QueryRow(ctx, CreateWebhookLog,
		arg.Source,
		arg.EventType,
		arg.Payload,
		arg.Headers,
		arg.IdempotencyKey,
	)
	var i WebhooksLog
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.Processed,
		&i.ProcessedAt,
		&i.ResponseStatus,
		&i.ResponseBody,
		&i.ErrorMessage,
		&i.IdempotencyKey,
		&i.CreatedAt,
	)
	return i, err
}

const GetWebhookLog = `-- name: GetWebhookLog :one
SELECT id, source, event_type, payload, headers, processed, processed_at, response_status, response_body, error_message, idempotency_key, created_at FROM webhooks_log WHERE id = $1
`

func (q *Queries) GetWebhookLog(ctx context.Context, id uuid.UUID) (WebhooksLog, error) {
	row := q.db.QueryRow(ctx, GetWebhookLog, id)
	var i WebhooksLog
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.EventType,
		&i.Payload,
		&i.Headers,
		&i.Processed,
		&i.ProcessedAt,
		&i.ResponseStatus,
		&i.ResponseBody,
		&i.ErrorMessage,
		&i.IdempotencyKey,
		&i.CreatedAt,
	)
	return i, err
}

const ListUnprocessedWebhooks = `-- name: ListUnprocessedWebhooks :many
SELECT id, source, event_type, payload, headers, processed, processed_at, response_status, response_body, error_message, idempotency_key, created_at FROM webhooks_log
WHERE processed = false
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) ListUnprocessedWebhooks(ctx context.Context, limit int32) ([]WebhooksLog, error) {
	rows, err := q.db.Query(ctx, ListUnprocessedWebhooks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhooksLog{}
	for rows.Next() {
		var i WebhooksLog
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.EventType,
			&i.Payload,
			&i.Headers,
			&i.Processed,
			&i.ProcessedAt,
			&i.ResponseStatus,
			&i.ResponseBody,
			&i.ErrorMessage,
			&i.IdempotencyKey,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkWebhookFailed = `-- name: MarkWebhookFailed :exec
UPDATE webhooks_log
SET 
    processed = false,
    error_message = $2
WHERE id = $1
`

type MarkWebhookFailedParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	ErrorMessage *string   `db:"error_message" json:"error_message"`
}

func (q *Queries) MarkWebhookFailed(ctx context.Context, arg MarkWebhookFailedParams) error {
	_, err := q.db.Exec(ctx, MarkWebhookFailed, arg.ID, arg.ErrorMessage)
	return err
}

const MarkWebhookProcessed = `-- name: MarkWebhookProcessed :exec
UPDATE webhooks_log
SET 
    processed = true,
    processed_at = NOW(),
    response_status = $2,
    response_body = $3
WHERE id = $1
`

type MarkWebhookProcessedParams struct {
	ID             uuid.UUID `db:"id" json:"id"`
	ResponseStatus *int32    `db:"response_status" json:"response_status"`
	ResponseBody   *string   `db:"response_body" json:"response_body"`
}

func (q *Queries) MarkWebhookProcessed(ctx context.Context, arg MarkWebhookProcessedParams) error {
	_, err := q.db.Exec(ctx, MarkWebhookProcessed, arg.ID, arg.ResponseStatus, arg.ResponseBody)
	return err
}
