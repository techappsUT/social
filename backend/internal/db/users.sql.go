// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CreateUser = `-- name: CreateUser :one

INSERT INTO users (
    email,
    email_verified,
    password_hash,
    full_name,
    avatar_url,
    timezone
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, email, email_verified, password_hash, full_name, avatar_url, timezone, locale, is_active, last_login_at, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email         string         `db:"email" json:"email"`
	EmailVerified sql.NullBool   `db:"email_verified" json:"email_verified"`
	PasswordHash  sql.NullString `db:"password_hash" json:"password_hash"`
	FullName      sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl     sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone      sql.NullString `db:"timezone" json:"timezone"`
}

// path: backend/sql/users.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.Email,
		arg.EmailVerified,
		arg.PasswordHash,
		arg.FullName,
		arg.AvatarUrl,
		arg.Timezone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, email_verified, password_hash, full_name, avatar_url, timezone, locale, is_active, last_login_at, created_at, updated_at, deleted_at FROM users
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, email, email_verified, password_hash, full_name, avatar_url, timezone, locale, is_active, last_login_at, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const MarkUserEmailVerified = `-- name: MarkUserEmailVerified :exec
UPDATE users
SET 
    email_verified = true,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkUserEmailVerified(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, MarkUserEmailVerified, id)
	return err
}

const SoftDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET 
    deleted_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, SoftDeleteUser, id)
	return err
}

const UpdateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, UpdateUserLastLogin, id)
	return err
}

const UpdateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET 
    password_hash = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID      `db:"id" json:"id"`
	PasswordHash sql.NullString `db:"password_hash" json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, UpdateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const UpdateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET 
    full_name = COALESCE($1, full_name),
    avatar_url = COALESCE($2, avatar_url),
    timezone = COALESCE($3, timezone),
    updated_at = NOW()
WHERE id = $4 AND deleted_at IS NULL
RETURNING id, email, email_verified, password_hash, full_name, avatar_url, timezone, locale, is_active, last_login_at, created_at, updated_at, deleted_at
`

type UpdateUserProfileParams struct {
	FullName  sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl sql.NullString `db:"avatar_url" json:"avatar_url"`
	Timezone  sql.NullString `db:"timezone" json:"timezone"`
	ID        uuid.UUID      `db:"id" json:"id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, UpdateUserProfile,
		arg.FullName,
		arg.AvatarUrl,
		arg.Timezone,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.PasswordHash,
		&i.FullName,
		&i.AvatarUrl,
		&i.Timezone,
		&i.Locale,
		&i.IsActive,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
