// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: team_memberships.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const AcceptInvitation = `-- name: AcceptInvitation :exec
UPDATE team_memberships
SET 
    invitation_accepted_at = NOW(),
    is_active = true,
    updated_at = NOW()
WHERE invitation_token = $1 AND invitation_accepted_at IS NULL
`

func (q *Queries) AcceptInvitation(ctx context.Context, invitationToken sql.NullString) error {
	_, err := q.db.ExecContext(ctx, AcceptInvitation, invitationToken)
	return err
}

const AddMemberToTeam = `-- name: AddMemberToTeam :one

INSERT INTO team_memberships (
    team_id,
    user_id,
    role_id,
    invited_by,
    is_active
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, team_id, user_id, role_id, invited_by, invitation_token, invitation_accepted_at, is_active, created_at, updated_at, deleted_at
`

type AddMemberToTeamParams struct {
	TeamID    uuid.UUID     `db:"team_id" json:"team_id"`
	UserID    uuid.UUID     `db:"user_id" json:"user_id"`
	RoleID    uuid.UUID     `db:"role_id" json:"role_id"`
	InvitedBy uuid.NullUUID `db:"invited_by" json:"invited_by"`
	IsActive  sql.NullBool  `db:"is_active" json:"is_active"`
}

// path: backend/sql/team_memberships.sql
func (q *Queries) AddMemberToTeam(ctx context.Context, arg AddMemberToTeamParams) (TeamMembership, error) {
	row := q.db.QueryRowContext(ctx, AddMemberToTeam,
		arg.TeamID,
		arg.UserID,
		arg.RoleID,
		arg.InvitedBy,
		arg.IsActive,
	)
	var i TeamMembership
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.RoleID,
		&i.InvitedBy,
		&i.InvitationToken,
		&i.InvitationAcceptedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const CreateInvitation = `-- name: CreateInvitation :one
INSERT INTO team_memberships (
    team_id,
    user_id,
    role_id,
    invited_by,
    invitation_token,
    is_active
) VALUES (
    $1, $2, $3, $4, $5, false
)
RETURNING id, team_id, user_id, role_id, invited_by, invitation_token, invitation_accepted_at, is_active, created_at, updated_at, deleted_at
`

type CreateInvitationParams struct {
	TeamID          uuid.UUID      `db:"team_id" json:"team_id"`
	UserID          uuid.UUID      `db:"user_id" json:"user_id"`
	RoleID          uuid.UUID      `db:"role_id" json:"role_id"`
	InvitedBy       uuid.NullUUID  `db:"invited_by" json:"invited_by"`
	InvitationToken sql.NullString `db:"invitation_token" json:"invitation_token"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (TeamMembership, error) {
	row := q.db.QueryRowContext(ctx, CreateInvitation,
		arg.TeamID,
		arg.UserID,
		arg.RoleID,
		arg.InvitedBy,
		arg.InvitationToken,
	)
	var i TeamMembership
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.RoleID,
		&i.InvitedBy,
		&i.InvitationToken,
		&i.InvitationAcceptedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const GetTeamMembership = `-- name: GetTeamMembership :one
SELECT tm.id, tm.team_id, tm.user_id, tm.role_id, tm.invited_by, tm.invitation_token, tm.invitation_accepted_at, tm.is_active, tm.created_at, tm.updated_at, tm.deleted_at, r.name as role_name, r.permissions as role_permissions
FROM team_memberships tm
INNER JOIN roles r ON tm.role_id = r.id
WHERE tm.team_id = $1 
  AND tm.user_id = $2 
  AND tm.deleted_at IS NULL
`

type GetTeamMembershipParams struct {
	TeamID uuid.UUID `db:"team_id" json:"team_id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

type GetTeamMembershipRow struct {
	ID                   uuid.UUID             `db:"id" json:"id"`
	TeamID               uuid.UUID             `db:"team_id" json:"team_id"`
	UserID               uuid.UUID             `db:"user_id" json:"user_id"`
	RoleID               uuid.UUID             `db:"role_id" json:"role_id"`
	InvitedBy            uuid.NullUUID         `db:"invited_by" json:"invited_by"`
	InvitationToken      sql.NullString        `db:"invitation_token" json:"invitation_token"`
	InvitationAcceptedAt sql.NullTime          `db:"invitation_accepted_at" json:"invitation_accepted_at"`
	IsActive             sql.NullBool          `db:"is_active" json:"is_active"`
	CreatedAt            sql.NullTime          `db:"created_at" json:"created_at"`
	UpdatedAt            sql.NullTime          `db:"updated_at" json:"updated_at"`
	DeletedAt            sql.NullTime          `db:"deleted_at" json:"deleted_at"`
	RoleName             string                `db:"role_name" json:"role_name"`
	RolePermissions      pqtype.NullRawMessage `db:"role_permissions" json:"role_permissions"`
}

func (q *Queries) GetTeamMembership(ctx context.Context, arg GetTeamMembershipParams) (GetTeamMembershipRow, error) {
	row := q.db.QueryRowContext(ctx, GetTeamMembership, arg.TeamID, arg.UserID)
	var i GetTeamMembershipRow
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.RoleID,
		&i.InvitedBy,
		&i.InvitationToken,
		&i.InvitationAcceptedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleName,
		&i.RolePermissions,
	)
	return i, err
}

const ListTeamMembers = `-- name: ListTeamMembers :many
SELECT 
    tm.id, tm.team_id, tm.user_id, tm.role_id, tm.invited_by, tm.invitation_token, tm.invitation_accepted_at, tm.is_active, tm.created_at, tm.updated_at, tm.deleted_at,
    u.email,
    u.full_name,
    u.avatar_url,
    r.name as role_name
FROM team_memberships tm
INNER JOIN users u ON tm.user_id = u.id
INNER JOIN roles r ON tm.role_id = r.id
WHERE tm.team_id = $1 
  AND tm.deleted_at IS NULL
  AND u.deleted_at IS NULL
ORDER BY tm.created_at ASC
`

type ListTeamMembersRow struct {
	ID                   uuid.UUID      `db:"id" json:"id"`
	TeamID               uuid.UUID      `db:"team_id" json:"team_id"`
	UserID               uuid.UUID      `db:"user_id" json:"user_id"`
	RoleID               uuid.UUID      `db:"role_id" json:"role_id"`
	InvitedBy            uuid.NullUUID  `db:"invited_by" json:"invited_by"`
	InvitationToken      sql.NullString `db:"invitation_token" json:"invitation_token"`
	InvitationAcceptedAt sql.NullTime   `db:"invitation_accepted_at" json:"invitation_accepted_at"`
	IsActive             sql.NullBool   `db:"is_active" json:"is_active"`
	CreatedAt            sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt            sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt            sql.NullTime   `db:"deleted_at" json:"deleted_at"`
	Email                string         `db:"email" json:"email"`
	FullName             sql.NullString `db:"full_name" json:"full_name"`
	AvatarUrl            sql.NullString `db:"avatar_url" json:"avatar_url"`
	RoleName             string         `db:"role_name" json:"role_name"`
}

func (q *Queries) ListTeamMembers(ctx context.Context, teamID uuid.UUID) ([]ListTeamMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, ListTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTeamMembersRow{}
	for rows.Next() {
		var i ListTeamMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.UserID,
			&i.RoleID,
			&i.InvitedBy,
			&i.InvitationToken,
			&i.InvitationAcceptedAt,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.FullName,
			&i.AvatarUrl,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveMemberFromTeam = `-- name: RemoveMemberFromTeam :exec
UPDATE team_memberships
SET 
    deleted_at = NOW(),
    updated_at = NOW()
WHERE team_id = $1 AND user_id = $2
`

type RemoveMemberFromTeamParams struct {
	TeamID uuid.UUID `db:"team_id" json:"team_id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) RemoveMemberFromTeam(ctx context.Context, arg RemoveMemberFromTeamParams) error {
	_, err := q.db.ExecContext(ctx, RemoveMemberFromTeam, arg.TeamID, arg.UserID)
	return err
}

const UpdateMemberRole = `-- name: UpdateMemberRole :one
UPDATE team_memberships
SET 
    role_id = $2,
    updated_at = NOW()
WHERE team_id = $1 AND user_id = $3 AND deleted_at IS NULL
RETURNING id, team_id, user_id, role_id, invited_by, invitation_token, invitation_accepted_at, is_active, created_at, updated_at, deleted_at
`

type UpdateMemberRoleParams struct {
	TeamID uuid.UUID `db:"team_id" json:"team_id"`
	RoleID uuid.UUID `db:"role_id" json:"role_id"`
	UserID uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) UpdateMemberRole(ctx context.Context, arg UpdateMemberRoleParams) (TeamMembership, error) {
	row := q.db.QueryRowContext(ctx, UpdateMemberRole, arg.TeamID, arg.RoleID, arg.UserID)
	var i TeamMembership
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.RoleID,
		&i.InvitedBy,
		&i.InvitationToken,
		&i.InvitationAcceptedAt,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
