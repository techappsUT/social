// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: social_tokens.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const GetSocialToken = `-- name: GetSocialToken :one
SELECT id, social_account_id, access_token, refresh_token, token_type, expires_at, scope, created_at, updated_at FROM social_tokens
WHERE social_account_id = $1
`

func (q *Queries) GetSocialToken(ctx context.Context, socialAccountID uuid.UUID) (SocialToken, error) {
	row := q.db.QueryRow(ctx, GetSocialToken, socialAccountID)
	var i SocialToken
	err := row.Scan(
		&i.ID,
		&i.SocialAccountID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.ExpiresAt,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListExpiringTokens = `-- name: ListExpiringTokens :many
SELECT st.id, st.social_account_id, st.access_token, st.refresh_token, st.token_type, st.expires_at, st.scope, st.created_at, st.updated_at, sa.team_id, sa.platform
FROM social_tokens st
INNER JOIN social_accounts sa ON st.social_account_id = sa.id
WHERE st.expires_at < $1
  AND sa.status = 'active'
  AND sa.deleted_at IS NULL
ORDER BY st.expires_at ASC
`

type ListExpiringTokensRow struct {
	ID              uuid.UUID          `db:"id" json:"id"`
	SocialAccountID uuid.UUID          `db:"social_account_id" json:"social_account_id"`
	AccessToken     string             `db:"access_token" json:"access_token"`
	RefreshToken    *string            `db:"refresh_token" json:"refresh_token"`
	TokenType       *string            `db:"token_type" json:"token_type"`
	ExpiresAt       pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Scope           *string            `db:"scope" json:"scope"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	TeamID          uuid.UUID          `db:"team_id" json:"team_id"`
	Platform        SocialPlatform     `db:"platform" json:"platform"`
}

func (q *Queries) ListExpiringTokens(ctx context.Context, expiresAt pgtype.Timestamptz) ([]ListExpiringTokensRow, error) {
	rows, err := q.db.Query(ctx, ListExpiringTokens, expiresAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListExpiringTokensRow{}
	for rows.Next() {
		var i ListExpiringTokensRow
		if err := rows.Scan(
			&i.ID,
			&i.SocialAccountID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.TokenType,
			&i.ExpiresAt,
			&i.Scope,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
			&i.Platform,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpsertSocialToken = `-- name: UpsertSocialToken :one

INSERT INTO social_tokens (
    social_account_id,
    access_token,
    refresh_token,
    token_type,
    expires_at,
    scope
) VALUES (
    $1, $2, $3, $4, $5, $6
)
ON CONFLICT (social_account_id) 
DO UPDATE SET
    access_token = EXCLUDED.access_token,
    refresh_token = EXCLUDED.refresh_token,
    token_type = EXCLUDED.token_type,
    expires_at = EXCLUDED.expires_at,
    scope = EXCLUDED.scope,
    updated_at = NOW()
RETURNING id, social_account_id, access_token, refresh_token, token_type, expires_at, scope, created_at, updated_at
`

type UpsertSocialTokenParams struct {
	SocialAccountID uuid.UUID          `db:"social_account_id" json:"social_account_id"`
	AccessToken     string             `db:"access_token" json:"access_token"`
	RefreshToken    *string            `db:"refresh_token" json:"refresh_token"`
	TokenType       *string            `db:"token_type" json:"token_type"`
	ExpiresAt       pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
	Scope           *string            `db:"scope" json:"scope"`
}

// path: backend/sql/social_tokens.sql
func (q *Queries) UpsertSocialToken(ctx context.Context, arg UpsertSocialTokenParams) (SocialToken, error) {
	row := q.db.QueryRow(ctx, UpsertSocialToken,
		arg.SocialAccountID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenType,
		arg.ExpiresAt,
		arg.Scope,
	)
	var i SocialToken
	err := row.Scan(
		&i.ID,
		&i.SocialAccountID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.ExpiresAt,
		&i.Scope,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
