// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post_attachments.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const CreatePostAttachment = `-- name: CreatePostAttachment :one

INSERT INTO post_attachments (
    scheduled_post_id,
    type,
    url,
    thumbnail_url,
    file_size,
    mime_type,
    width,
    height,
    duration,
    alt_text,
    display_order
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, scheduled_post_id, type, url, thumbnail_url, file_size, mime_type, width, height, duration, alt_text, display_order, upload_metadata, created_at
`

type CreatePostAttachmentParams struct {
	ScheduledPostID uuid.UUID      `db:"scheduled_post_id" json:"scheduled_post_id"`
	Type            AttachmentType `db:"type" json:"type"`
	Url             string         `db:"url" json:"url"`
	ThumbnailUrl    *string        `db:"thumbnail_url" json:"thumbnail_url"`
	FileSize        *int64         `db:"file_size" json:"file_size"`
	MimeType        *string        `db:"mime_type" json:"mime_type"`
	Width           *int32         `db:"width" json:"width"`
	Height          *int32         `db:"height" json:"height"`
	Duration        *int32         `db:"duration" json:"duration"`
	AltText         *string        `db:"alt_text" json:"alt_text"`
	DisplayOrder    *int32         `db:"display_order" json:"display_order"`
}

// path: backend/sql/post_attachments.sql
func (q *Queries) CreatePostAttachment(ctx context.Context, arg CreatePostAttachmentParams) (PostAttachment, error) {
	row := q.db.QueryRow(ctx, CreatePostAttachment,
		arg.ScheduledPostID,
		arg.Type,
		arg.Url,
		arg.ThumbnailUrl,
		arg.FileSize,
		arg.MimeType,
		arg.Width,
		arg.Height,
		arg.Duration,
		arg.AltText,
		arg.DisplayOrder,
	)
	var i PostAttachment
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.Type,
		&i.Url,
		&i.ThumbnailUrl,
		&i.FileSize,
		&i.MimeType,
		&i.Width,
		&i.Height,
		&i.Duration,
		&i.AltText,
		&i.DisplayOrder,
		&i.UploadMetadata,
		&i.CreatedAt,
	)
	return i, err
}

const DeletePostAttachment = `-- name: DeletePostAttachment :exec
DELETE FROM post_attachments
WHERE id = $1
`

func (q *Queries) DeletePostAttachment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeletePostAttachment, id)
	return err
}

const DeletePostAttachmentsByScheduledPost = `-- name: DeletePostAttachmentsByScheduledPost :exec
DELETE FROM post_attachments
WHERE scheduled_post_id = $1
`

func (q *Queries) DeletePostAttachmentsByScheduledPost(ctx context.Context, scheduledPostID uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeletePostAttachmentsByScheduledPost, scheduledPostID)
	return err
}

const ListPostAttachments = `-- name: ListPostAttachments :many
SELECT id, scheduled_post_id, type, url, thumbnail_url, file_size, mime_type, width, height, duration, alt_text, display_order, upload_metadata, created_at FROM post_attachments
WHERE scheduled_post_id = $1
ORDER BY display_order ASC, created_at ASC
`

func (q *Queries) ListPostAttachments(ctx context.Context, scheduledPostID uuid.UUID) ([]PostAttachment, error) {
	rows, err := q.db.Query(ctx, ListPostAttachments, scheduledPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostAttachment{}
	for rows.Next() {
		var i PostAttachment
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledPostID,
			&i.Type,
			&i.Url,
			&i.ThumbnailUrl,
			&i.FileSize,
			&i.MimeType,
			&i.Width,
			&i.Height,
			&i.Duration,
			&i.AltText,
			&i.DisplayOrder,
			&i.UploadMetadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
