// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePost = `-- name: CreatePost :one

INSERT INTO posts (
    scheduled_post_id,
    team_id,
    social_account_id,
    platform_post_id,
    platform_post_url,
    content,
    published_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, impressions, engagements, clicks, likes, shares, comments, last_analytics_fetch_at, created_at, updated_at
`

type CreatePostParams struct {
	ScheduledPostID uuid.UUID `db:"scheduled_post_id" json:"scheduled_post_id"`
	TeamID          uuid.UUID `db:"team_id" json:"team_id"`
	SocialAccountID uuid.UUID `db:"social_account_id" json:"social_account_id"`
	PlatformPostID  string    `db:"platform_post_id" json:"platform_post_id"`
	PlatformPostUrl *string   `db:"platform_post_url" json:"platform_post_url"`
	Content         *string   `db:"content" json:"content"`
	PublishedAt     time.Time `db:"published_at" json:"published_at"`
}

// path: backend/sql/posts.sql
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, CreatePost,
		arg.ScheduledPostID,
		arg.TeamID,
		arg.SocialAccountID,
		arg.PlatformPostID,
		arg.PlatformPostUrl,
		arg.Content,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Impressions,
		&i.Engagements,
		&i.Clicks,
		&i.Likes,
		&i.Shares,
		&i.Comments,
		&i.LastAnalyticsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPostByID = `-- name: GetPostByID :one
SELECT id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, impressions, engagements, clicks, likes, shares, comments, last_analytics_fetch_at, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, GetPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Impressions,
		&i.Engagements,
		&i.Clicks,
		&i.Likes,
		&i.Shares,
		&i.Comments,
		&i.LastAnalyticsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPostByPlatformID = `-- name: GetPostByPlatformID :one
SELECT id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, impressions, engagements, clicks, likes, shares, comments, last_analytics_fetch_at, created_at, updated_at FROM posts
WHERE social_account_id = $1 AND platform_post_id = $2
`

type GetPostByPlatformIDParams struct {
	SocialAccountID uuid.UUID `db:"social_account_id" json:"social_account_id"`
	PlatformPostID  string    `db:"platform_post_id" json:"platform_post_id"`
}

func (q *Queries) GetPostByPlatformID(ctx context.Context, arg GetPostByPlatformIDParams) (Post, error) {
	row := q.db.QueryRow(ctx, GetPostByPlatformID, arg.SocialAccountID, arg.PlatformPostID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Impressions,
		&i.Engagements,
		&i.Clicks,
		&i.Likes,
		&i.Shares,
		&i.Comments,
		&i.LastAnalyticsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPostByScheduledPostID = `-- name: GetPostByScheduledPostID :one
SELECT id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, impressions, engagements, clicks, likes, shares, comments, last_analytics_fetch_at, created_at, updated_at FROM posts WHERE scheduled_post_id = $1
`

func (q *Queries) GetPostByScheduledPostID(ctx context.Context, scheduledPostID uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, GetPostByScheduledPostID, scheduledPostID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Impressions,
		&i.Engagements,
		&i.Clicks,
		&i.Likes,
		&i.Shares,
		&i.Comments,
		&i.LastAnalyticsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const IncrementPostMetric = `-- name: IncrementPostMetric :exec
UPDATE posts
SET 
    impressions = CASE WHEN $1 = 'impressions' THEN impressions + $2 ELSE impressions END,
    engagements = CASE WHEN $1 = 'engagements' THEN engagements + $2 ELSE engagements END,
    clicks = CASE WHEN $1 = 'clicks' THEN clicks + $2 ELSE clicks END,
    likes = CASE WHEN $1 = 'likes' THEN likes + $2 ELSE likes END,
    shares = CASE WHEN $1 = 'shares' THEN shares + $2 ELSE shares END,
    comments = CASE WHEN $1 = 'comments' THEN comments + $2 ELSE comments END,
    updated_at = NOW()
WHERE id = $3
`

type IncrementPostMetricParams struct {
	Metric interface{} `db:"metric" json:"metric"`
	Value  *int64      `db:"value" json:"value"`
	PostID uuid.UUID   `db:"post_id" json:"post_id"`
}

func (q *Queries) IncrementPostMetric(ctx context.Context, arg IncrementPostMetricParams) error {
	_, err := q.db.Exec(ctx, IncrementPostMetric, arg.Metric, arg.Value, arg.PostID)
	return err
}

const ListPostsByTeam = `-- name: ListPostsByTeam :many
SELECT 
    p.id, p.scheduled_post_id, p.team_id, p.social_account_id, p.platform_post_id, p.platform_post_url, p.content, p.published_at, p.impressions, p.engagements, p.clicks, p.likes, p.shares, p.comments, p.last_analytics_fetch_at, p.created_at, p.updated_at,
    sa.platform,
    sa.username
FROM posts p
INNER JOIN social_accounts sa ON p.social_account_id = sa.id
WHERE p.team_id = $1
  AND p.published_at BETWEEN $4 AND $5
ORDER BY p.published_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByTeamParams struct {
	TeamID    uuid.UUID `db:"team_id" json:"team_id"`
	Limit     int32     `db:"limit" json:"limit"`
	Offset    int32     `db:"offset" json:"offset"`
	StartDate time.Time `db:"start_date" json:"start_date"`
	EndDate   time.Time `db:"end_date" json:"end_date"`
}

type ListPostsByTeamRow struct {
	ID                   uuid.UUID          `db:"id" json:"id"`
	ScheduledPostID      uuid.UUID          `db:"scheduled_post_id" json:"scheduled_post_id"`
	TeamID               uuid.UUID          `db:"team_id" json:"team_id"`
	SocialAccountID      uuid.UUID          `db:"social_account_id" json:"social_account_id"`
	PlatformPostID       string             `db:"platform_post_id" json:"platform_post_id"`
	PlatformPostUrl      *string            `db:"platform_post_url" json:"platform_post_url"`
	Content              *string            `db:"content" json:"content"`
	PublishedAt          time.Time          `db:"published_at" json:"published_at"`
	Impressions          *int64             `db:"impressions" json:"impressions"`
	Engagements          *int64             `db:"engagements" json:"engagements"`
	Clicks               *int64             `db:"clicks" json:"clicks"`
	Likes                *int64             `db:"likes" json:"likes"`
	Shares               *int64             `db:"shares" json:"shares"`
	Comments             *int64             `db:"comments" json:"comments"`
	LastAnalyticsFetchAt pgtype.Timestamptz `db:"last_analytics_fetch_at" json:"last_analytics_fetch_at"`
	CreatedAt            pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Platform             SocialPlatform     `db:"platform" json:"platform"`
	Username             *string            `db:"username" json:"username"`
}

func (q *Queries) ListPostsByTeam(ctx context.Context, arg ListPostsByTeamParams) ([]ListPostsByTeamRow, error) {
	rows, err := q.db.Query(ctx, ListPostsByTeam,
		arg.TeamID,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByTeamRow{}
	for rows.Next() {
		var i ListPostsByTeamRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledPostID,
			&i.TeamID,
			&i.SocialAccountID,
			&i.PlatformPostID,
			&i.PlatformPostUrl,
			&i.Content,
			&i.PublishedAt,
			&i.Impressions,
			&i.Engagements,
			&i.Clicks,
			&i.Likes,
			&i.Shares,
			&i.Comments,
			&i.LastAnalyticsFetchAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Platform,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePostAnalytics = `-- name: UpdatePostAnalytics :exec
UPDATE posts
SET 
    impressions = $2,
    engagements = $3,
    clicks = $4,
    likes = $5,
    shares = $6,
    comments = $7,
    last_analytics_fetch_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

type UpdatePostAnalyticsParams struct {
	ID          uuid.UUID `db:"id" json:"id"`
	Impressions *int64    `db:"impressions" json:"impressions"`
	Engagements *int64    `db:"engagements" json:"engagements"`
	Clicks      *int64    `db:"clicks" json:"clicks"`
	Likes       *int64    `db:"likes" json:"likes"`
	Shares      *int64    `db:"shares" json:"shares"`
	Comments    *int64    `db:"comments" json:"comments"`
}

func (q *Queries) UpdatePostAnalytics(ctx context.Context, arg UpdatePostAnalyticsParams) error {
	_, err := q.db.Exec(ctx, UpdatePostAnalytics,
		arg.ID,
		arg.Impressions,
		arg.Engagements,
		arg.Clicks,
		arg.Likes,
		arg.Shares,
		arg.Comments,
	)
	return err
}
