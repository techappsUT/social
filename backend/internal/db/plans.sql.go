// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plans.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const GetPlanByID = `-- name: GetPlanByID :one

SELECT id, name, slug, description, price_cents, currency, interval, features, stripe_price_id, stripe_product_id, is_active, is_popular, display_order, created_at, updated_at FROM plans WHERE id = $1 AND is_active = true
`

// path: backend/sql/plans.sql
func (q *Queries) GetPlanByID(ctx context.Context, id uuid.UUID) (Plan, error) {
	row := q.db.QueryRow(ctx, GetPlanByID, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.Interval,
		&i.Features,
		&i.StripePriceID,
		&i.StripeProductID,
		&i.IsActive,
		&i.IsPopular,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPlanBySlug = `-- name: GetPlanBySlug :one
SELECT id, name, slug, description, price_cents, currency, interval, features, stripe_price_id, stripe_product_id, is_active, is_popular, display_order, created_at, updated_at FROM plans WHERE slug = $1 AND is_active = true
`

func (q *Queries) GetPlanBySlug(ctx context.Context, slug string) (Plan, error) {
	row := q.db.QueryRow(ctx, GetPlanBySlug, slug)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.Interval,
		&i.Features,
		&i.StripePriceID,
		&i.StripeProductID,
		&i.IsActive,
		&i.IsPopular,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListActivePlans = `-- name: ListActivePlans :many
SELECT id, name, slug, description, price_cents, currency, interval, features, stripe_price_id, stripe_product_id, is_active, is_popular, display_order, created_at, updated_at FROM plans 
WHERE is_active = true 
ORDER BY display_order ASC, price_cents ASC
`

func (q *Queries) ListActivePlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.Query(ctx, ListActivePlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Plan{}
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.PriceCents,
			&i.Currency,
			&i.Interval,
			&i.Features,
			&i.StripePriceID,
			&i.StripeProductID,
			&i.IsActive,
			&i.IsPopular,
			&i.DisplayOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
