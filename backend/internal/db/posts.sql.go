// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CountPostsByTeam = `-- name: CountPostsByTeam :one
SELECT COUNT(*)
FROM posts
WHERE team_id = $1
`

func (q *Queries) CountPostsByTeam(ctx context.Context, teamID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, CountPostsByTeam, teamID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountPostsByTeamAndDateRange = `-- name: CountPostsByTeamAndDateRange :one
SELECT COUNT(*)
FROM posts
WHERE team_id = $1
  AND published_at BETWEEN $2 AND $3
`

type CountPostsByTeamAndDateRangeParams struct {
	TeamID        uuid.UUID          `db:"team_id" json:"team_id"`
	PublishedAt   pgtype.Timestamptz `db:"published_at" json:"published_at"`
	PublishedAt_2 pgtype.Timestamptz `db:"published_at_2" json:"published_at_2"`
}

func (q *Queries) CountPostsByTeamAndDateRange(ctx context.Context, arg CountPostsByTeamAndDateRangeParams) (int64, error) {
	row := q.db.QueryRow(ctx, CountPostsByTeamAndDateRange, arg.TeamID, arg.PublishedAt, arg.PublishedAt_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePost = `-- name: CreatePost :one

INSERT INTO posts (
    scheduled_post_id,
    team_id,
    social_account_id,
    platform_post_id,
    platform_post_url,
    content,
    published_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, metrics, last_metrics_fetch_at, created_at, updated_at
`

type CreatePostParams struct {
	ScheduledPostID pgtype.UUID        `db:"scheduled_post_id" json:"scheduled_post_id"`
	TeamID          uuid.UUID          `db:"team_id" json:"team_id"`
	SocialAccountID uuid.UUID          `db:"social_account_id" json:"social_account_id"`
	PlatformPostID  *string            `db:"platform_post_id" json:"platform_post_id"`
	PlatformPostUrl *string            `db:"platform_post_url" json:"platform_post_url"`
	Content         string             `db:"content" json:"content"`
	PublishedAt     pgtype.Timestamptz `db:"published_at" json:"published_at"`
}

// path: backend/sql/posts.sql
// ðŸ”„ REFACTORED - Schema has impressions in analytics_events, not posts table
func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, CreatePost,
		arg.ScheduledPostID,
		arg.TeamID,
		arg.SocialAccountID,
		arg.PlatformPostID,
		arg.PlatformPostUrl,
		arg.Content,
		arg.PublishedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Metrics,
		&i.LastMetricsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPostByID = `-- name: GetPostByID :one
SELECT id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, metrics, last_metrics_fetch_at, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, GetPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Metrics,
		&i.LastMetricsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPostByPlatformID = `-- name: GetPostByPlatformID :one
SELECT id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, metrics, last_metrics_fetch_at, created_at, updated_at FROM posts
WHERE social_account_id = $1 AND platform_post_id = $2
`

type GetPostByPlatformIDParams struct {
	SocialAccountID uuid.UUID `db:"social_account_id" json:"social_account_id"`
	PlatformPostID  *string   `db:"platform_post_id" json:"platform_post_id"`
}

func (q *Queries) GetPostByPlatformID(ctx context.Context, arg GetPostByPlatformIDParams) (Post, error) {
	row := q.db.QueryRow(ctx, GetPostByPlatformID, arg.SocialAccountID, arg.PlatformPostID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Metrics,
		&i.LastMetricsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPostByScheduledPostID = `-- name: GetPostByScheduledPostID :one
SELECT id, scheduled_post_id, team_id, social_account_id, platform_post_id, platform_post_url, content, published_at, metrics, last_metrics_fetch_at, created_at, updated_at FROM posts WHERE scheduled_post_id = $1
`

func (q *Queries) GetPostByScheduledPostID(ctx context.Context, scheduledPostID pgtype.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, GetPostByScheduledPostID, scheduledPostID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ScheduledPostID,
		&i.TeamID,
		&i.SocialAccountID,
		&i.PlatformPostID,
		&i.PlatformPostUrl,
		&i.Content,
		&i.PublishedAt,
		&i.Metrics,
		&i.LastMetricsFetchAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListPostsByTeam = `-- name: ListPostsByTeam :many
SELECT 
    p.id, p.scheduled_post_id, p.team_id, p.social_account_id, p.platform_post_id, p.platform_post_url, p.content, p.published_at, p.metrics, p.last_metrics_fetch_at, p.created_at, p.updated_at,
    sa.platform,
    sa.username
FROM posts p
INNER JOIN social_accounts sa ON p.social_account_id = sa.id
WHERE p.team_id = $1
  AND p.published_at BETWEEN $2 AND $3
ORDER BY p.published_at DESC
LIMIT $4 OFFSET $5
`

type ListPostsByTeamParams struct {
	TeamID        uuid.UUID          `db:"team_id" json:"team_id"`
	PublishedAt   pgtype.Timestamptz `db:"published_at" json:"published_at"`
	PublishedAt_2 pgtype.Timestamptz `db:"published_at_2" json:"published_at_2"`
	Limit         int32              `db:"limit" json:"limit"`
	Offset        int32              `db:"offset" json:"offset"`
}

type ListPostsByTeamRow struct {
	ID                 uuid.UUID          `db:"id" json:"id"`
	ScheduledPostID    pgtype.UUID        `db:"scheduled_post_id" json:"scheduled_post_id"`
	TeamID             uuid.UUID          `db:"team_id" json:"team_id"`
	SocialAccountID    uuid.UUID          `db:"social_account_id" json:"social_account_id"`
	PlatformPostID     *string            `db:"platform_post_id" json:"platform_post_id"`
	PlatformPostUrl    *string            `db:"platform_post_url" json:"platform_post_url"`
	Content            string             `db:"content" json:"content"`
	PublishedAt        pgtype.Timestamptz `db:"published_at" json:"published_at"`
	Metrics            []byte             `db:"metrics" json:"metrics"`
	LastMetricsFetchAt pgtype.Timestamptz `db:"last_metrics_fetch_at" json:"last_metrics_fetch_at"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Platform           SocialPlatform     `db:"platform" json:"platform"`
	Username           *string            `db:"username" json:"username"`
}

func (q *Queries) ListPostsByTeam(ctx context.Context, arg ListPostsByTeamParams) ([]ListPostsByTeamRow, error) {
	rows, err := q.db.Query(ctx, ListPostsByTeam,
		arg.TeamID,
		arg.PublishedAt,
		arg.PublishedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByTeamRow{}
	for rows.Next() {
		var i ListPostsByTeamRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledPostID,
			&i.TeamID,
			&i.SocialAccountID,
			&i.PlatformPostID,
			&i.PlatformPostUrl,
			&i.Content,
			&i.PublishedAt,
			&i.Metrics,
			&i.LastMetricsFetchAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Platform,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListRecentPostsByTeam = `-- name: ListRecentPostsByTeam :many
SELECT 
    p.id, p.scheduled_post_id, p.team_id, p.social_account_id, p.platform_post_id, p.platform_post_url, p.content, p.published_at, p.metrics, p.last_metrics_fetch_at, p.created_at, p.updated_at,
    sa.platform,
    sa.username
FROM posts p
INNER JOIN social_accounts sa ON p.social_account_id = sa.id
WHERE p.team_id = $1
ORDER BY p.published_at DESC
LIMIT $2
`

type ListRecentPostsByTeamParams struct {
	TeamID uuid.UUID `db:"team_id" json:"team_id"`
	Limit  int32     `db:"limit" json:"limit"`
}

type ListRecentPostsByTeamRow struct {
	ID                 uuid.UUID          `db:"id" json:"id"`
	ScheduledPostID    pgtype.UUID        `db:"scheduled_post_id" json:"scheduled_post_id"`
	TeamID             uuid.UUID          `db:"team_id" json:"team_id"`
	SocialAccountID    uuid.UUID          `db:"social_account_id" json:"social_account_id"`
	PlatformPostID     *string            `db:"platform_post_id" json:"platform_post_id"`
	PlatformPostUrl    *string            `db:"platform_post_url" json:"platform_post_url"`
	Content            string             `db:"content" json:"content"`
	PublishedAt        pgtype.Timestamptz `db:"published_at" json:"published_at"`
	Metrics            []byte             `db:"metrics" json:"metrics"`
	LastMetricsFetchAt pgtype.Timestamptz `db:"last_metrics_fetch_at" json:"last_metrics_fetch_at"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Platform           SocialPlatform     `db:"platform" json:"platform"`
	Username           *string            `db:"username" json:"username"`
}

func (q *Queries) ListRecentPostsByTeam(ctx context.Context, arg ListRecentPostsByTeamParams) ([]ListRecentPostsByTeamRow, error) {
	rows, err := q.db.Query(ctx, ListRecentPostsByTeam, arg.TeamID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRecentPostsByTeamRow{}
	for rows.Next() {
		var i ListRecentPostsByTeamRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduledPostID,
			&i.TeamID,
			&i.SocialAccountID,
			&i.PlatformPostID,
			&i.PlatformPostUrl,
			&i.Content,
			&i.PublishedAt,
			&i.Metrics,
			&i.LastMetricsFetchAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Platform,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
