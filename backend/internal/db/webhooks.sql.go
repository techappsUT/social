// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: webhooks.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const CountWebhooksBySource = `-- name: CountWebhooksBySource :one
SELECT COUNT(*)
FROM webhooks_log
WHERE source = $1
`

func (q *Queries) CountWebhooksBySource(ctx context.Context, source WebhookSource) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountWebhooksBySource, source)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateWebhookLog = `-- name: CreateWebhookLog :one

INSERT INTO webhooks_log (
    source,
    event_type,
    payload,
    processed
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, source, event_type, payload, processed, processed_at, error, received_at
`

type CreateWebhookLogParams struct {
	Source    WebhookSource   `db:"source" json:"source"`
	EventType string          `db:"event_type" json:"event_type"`
	Payload   json.RawMessage `db:"payload" json:"payload"`
	Processed sql.NullBool    `db:"processed" json:"processed"`
}

// path: backend/sql/webhooks.sql
// ðŸ”„ REFACTORED - Match actual schema (webhooks_log table)
func (q *Queries) CreateWebhookLog(ctx context.Context, arg CreateWebhookLogParams) (WebhooksLog, error) {
	row := q.db.QueryRowContext(ctx, CreateWebhookLog,
		arg.Source,
		arg.EventType,
		arg.Payload,
		arg.Processed,
	)
	var i WebhooksLog
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.EventType,
		&i.Payload,
		&i.Processed,
		&i.ProcessedAt,
		&i.Error,
		&i.ReceivedAt,
	)
	return i, err
}

const GetWebhookLogByID = `-- name: GetWebhookLogByID :one
SELECT id, source, event_type, payload, processed, processed_at, error, received_at FROM webhooks_log WHERE id = $1
`

func (q *Queries) GetWebhookLogByID(ctx context.Context, id uuid.UUID) (WebhooksLog, error) {
	row := q.db.QueryRowContext(ctx, GetWebhookLogByID, id)
	var i WebhooksLog
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.EventType,
		&i.Payload,
		&i.Processed,
		&i.ProcessedAt,
		&i.Error,
		&i.ReceivedAt,
	)
	return i, err
}

const ListUnprocessedWebhooks = `-- name: ListUnprocessedWebhooks :many
SELECT id, source, event_type, payload, processed, processed_at, error, received_at FROM webhooks_log
WHERE processed = FALSE
ORDER BY received_at ASC
LIMIT $1
`

func (q *Queries) ListUnprocessedWebhooks(ctx context.Context, limit int32) ([]WebhooksLog, error) {
	rows, err := q.db.QueryContext(ctx, ListUnprocessedWebhooks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhooksLog{}
	for rows.Next() {
		var i WebhooksLog
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.EventType,
			&i.Payload,
			&i.Processed,
			&i.ProcessedAt,
			&i.Error,
			&i.ReceivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWebhookLogs = `-- name: ListWebhookLogs :many
SELECT id, source, event_type, payload, processed, processed_at, error, received_at FROM webhooks_log
WHERE source = $1
ORDER BY received_at DESC
LIMIT $2 OFFSET $3
`

type ListWebhookLogsParams struct {
	Source WebhookSource `db:"source" json:"source"`
	Limit  int32         `db:"limit" json:"limit"`
	Offset int32         `db:"offset" json:"offset"`
}

func (q *Queries) ListWebhookLogs(ctx context.Context, arg ListWebhookLogsParams) ([]WebhooksLog, error) {
	rows, err := q.db.QueryContext(ctx, ListWebhookLogs, arg.Source, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhooksLog{}
	for rows.Next() {
		var i WebhooksLog
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.EventType,
			&i.Payload,
			&i.Processed,
			&i.ProcessedAt,
			&i.Error,
			&i.ReceivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkWebhookProcessed = `-- name: MarkWebhookProcessed :exec
UPDATE webhooks_log
SET processed = TRUE
WHERE id = $1
`

func (q *Queries) MarkWebhookProcessed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, MarkWebhookProcessed, id)
	return err
}
